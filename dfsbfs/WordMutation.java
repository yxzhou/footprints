package fgafa.dfsbfs;

import java.util.ArrayList;
import java.util.Hashtable;

/*
 * You are given a string e.g."face" and a set of mutation rules, e.g. a->@, e->3, e-E. 
 * Print all the possible strings that can be generated by the rules, e.g. f@c3, fac3, etc.
 *
 */

public class WordMutation {

  /**
   * @param args
   */
  public static void main(String[] args) {
    // TODO Auto-generated method stub

    patterns.put("e", "e3");
    patterns.put("a", "a@");
    
    String t1 = "eat";
    
    WordMutation s = new WordMutation();
    s.createPatterns(t1);
    
    System.out.println(ht.toString());
    //System.out.println(ht.values());
  }

  //private static Hashtable<String, String> ht = new Hashtable<String, String>();
  private static ArrayList<String> ht = new ArrayList<String>();
  private static Hashtable<String, String> patterns = new Hashtable<String, String>();
  
  public void createPatterns(String str){
    
    StringBuffer sb = new StringBuffer();;

    createPatterns(str, 0, sb);
    
  }
  
  private void createPatterns(String str, int iStart, StringBuffer sb){
    int len = str.length();
    char c;

    for(int i =iStart; i<len; i++ ){
      c = str.charAt(i);
      
      if(patterns.containsKey(String.valueOf(c))){
        String mutation = patterns.get(String.valueOf(c));
        for(int j=0; j<mutation.length(); j++){
          StringBuffer sbTmp = new StringBuffer(sb.toString());
          sbTmp.append(mutation.charAt(j));
          
          createPatterns(str, i+1, sbTmp);
        }
        
        return;
        
      }else{
        sb.append(c);
      } 
    }
    
    if(len == iStart || sb.length() == len){
      //ht.put(sb.toString(), sb.toString());
      ht.add(sb.toString());
      return;
    }
  }
  
  
}
